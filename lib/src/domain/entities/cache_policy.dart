/// **CachePolicy - ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏á‡∏û‡∏•‡∏±‡∏á**
///
/// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏é‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä
/// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
///
/// ## üéØ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
///
/// CachePolicy ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏ä‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ:
/// - ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Duration ‡∏´‡∏£‡∏∑‡∏≠ DateTime)
/// - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏∏‡∏• (AES Encryption)
/// - ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á entry
/// - ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
///
/// ## ‚ö° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
///
/// ```dart
/// // Policy ‡πÅ‡∏ö‡∏ö Duration (2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
/// final policy = CachePolicy.duration(
///   duration: Duration(hours: 2),
///   encryptionKey: 'secure-key-2024',
/// );
///
/// // Policy ‡πÅ‡∏ö‡∏ö DateTime (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞)
/// final policy = CachePolicy.expiresAt(
///   expirationTime: DateTime(2024, 12, 31, 23, 59, 59),
///   encryptionKey: 'new-year-key',
/// );
/// ```
///
/// ## üïí Factory Methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å
///
/// ```dart
/// // ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤
/// final policy1 = CachePolicy.inMinutes(30);
/// final policy2 = CachePolicy.inHours(6);
/// final policy3 = CachePolicy.inDays(7);
///
/// // ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
/// final policy4 = CachePolicy.endOfDay();      // 23:59:59 ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
/// final policy5 = CachePolicy.endOfWeek();     // ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
/// final policy6 = CachePolicy.endOfMonth();    // ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
/// final policy7 = CachePolicy.never();         // ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
/// ```
class CachePolicy {
  /// **‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏ä (customizable)**
  ///
  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä‡∏à‡∏∞‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
  ///
  /// **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ custom:**
  /// ```dart
  /// maxAge: Duration(minutes: 15),     // 15 ‡∏ô‡∏≤‡∏ó‡∏µ
  /// maxAge: Duration(hours: 2),        // 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  /// maxAge: Duration(days: 30),        // 30 ‡∏ß‡∏±‡∏ô
  /// maxAge: Duration(seconds: 30),     // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  /// ```
  ///
  /// **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏±‡πâ‡∏á maxAge ‡πÅ‡∏•‡∏∞ expiresAt, ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ expiresAt ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
  final Duration? maxAge;

  /// **‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô (highly customizable)**
  ///
  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
  /// ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏î‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  ///
  /// **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ custom:**
  /// ```dart
  /// // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ
  /// expiresAt: DateTime(2024, 12, 31, 23, 59, 59),
  ///
  /// // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏ß‡∏•‡∏≤ 18:00 ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  /// expiresAt: DateTime.now().copyWith(hour: 18, minute: 0, second: 0),
  ///
  /// // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏ß‡∏•‡∏≤ 9:00
  /// expiresAt: DateTime.now().add(Duration(days: 3)).copyWith(hour: 9),
  ///
  /// // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏´‡∏ô‡πâ‡∏≤
  /// expiresAt: DateTime.now().add(Duration(days: 7 - DateTime.now().weekday + 1)),
  /// ```
  final DateTime? expiresAt;

  /// **‡∏Ñ‡∏µ‡∏¢‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (fully customizable)**
  ///
  /// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä‡∏î‡πâ‡∏ß‡∏¢ AES encryption ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  /// ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  ///
  /// **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ custom:**
  /// ```dart
  /// // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  /// encryptionKey: 'my-secret-key-2024',
  ///
  /// // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production
  /// encryptionKey: 'prod-ultra-secure-key-v2-2024',
  ///
  /// // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user-specific data
  /// encryptionKey: 'user-${userId}-private-key',
  ///
  /// // ‡∏Ñ‡∏µ‡∏¢‡πå‡πÅ‡∏ö‡∏ö timestamp rotation
  /// encryptionKey: 'key-${DateTime.now().millisecondsSinceEpoch}',
  ///
  /// // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
  /// encryptionKey: 'banking-grade-security-key-2024',
  /// ```
  ///
  /// **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ encryptionKey ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  final String? encryptionKey;

  /// **‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä (customizable)**
  ///
  /// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÑ‡∏ö‡∏ï‡πå‡∏ó‡∏µ‡πà entry ‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡πÑ‡∏î‡πâ
  /// ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
  ///
  /// **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ custom:**
  /// ```dart
  /// maxSize: 1024,                    // 1KB
  /// maxSize: 1024 * 1024,             // 1MB
  /// maxSize: 10 * 1024 * 1024,        // 10MB
  /// maxSize: 100 * 1024 * 1024,       // 100MB
  /// maxSize: null,                    // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î
  /// ```
  final int? maxSize;

  /// **Constructor ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á CachePolicy**
  ///
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á CachePolicy ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö Duration ‡πÅ‡∏•‡∏∞ DateTime
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[maxAge]**: ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á (optional)
  ///   ```dart
  ///   maxAge: Duration(hours: 6),        // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  ///   maxAge: Duration(minutes: 30),     // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ
  ///   maxAge: Duration(days: 7),         // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô
  ///   ```
  ///
  /// - **[expiresAt]**: ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô (optional, ‡∏à‡∏∞ override maxAge)
  ///   ```dart
  ///   expiresAt: DateTime(2024, 12, 25, 12, 0, 0),  // ‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏°‡∏≤‡∏™ ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á
  ///   expiresAt: DateTime.now().add(Duration(days: 1)), // ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
  ///   ```
  ///
  /// - **[encryptionKey]**: ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (optional)
  ///   ```dart
  ///   encryptionKey: 'my-secret-key-2024',
  ///   encryptionKey: 'user-${userId}-key',
  ///   ```
  ///
  /// - **[maxSize]**: ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÑ‡∏ö‡∏ï‡πå (optional)
  ///   ```dart
  ///   maxSize: 1024 * 1024,  // 1MB
  ///   maxSize: null,         // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î
  ///   ```
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡πÅ‡∏ö‡∏ö Duration only
  /// final policy1 = CachePolicy(
  ///   maxAge: Duration(hours: 2),
  ///   encryptionKey: 'session-key',
  /// );
  ///
  /// // ‡πÅ‡∏ö‡∏ö DateTime only
  /// final policy2 = CachePolicy(
  ///   expiresAt: DateTime(2024, 6, 15, 18, 0, 0),
  ///   encryptionKey: 'event-key',
  ///   maxSize: 5 * 1024 * 1024, // 5MB
  /// );
  ///
  /// // ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà (expiresAt ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å)
  /// final policy3 = CachePolicy(
  ///   maxAge: Duration(days: 7),      // backup
  ///   expiresAt: DateTime.now().add(Duration(hours: 6)), // ‡∏´‡∏•‡∏±‡∏Å
  ///   encryptionKey: 'hybrid-key',
  /// );
  /// ```
  ///
  /// **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ maxAge ‡∏´‡∏£‡∏∑‡∏≠ expiresAt ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
  CachePolicy({this.maxAge, this.expiresAt, this.encryptionKey, this.maxSize})
    : assert(
        maxAge != null || expiresAt != null,
        'Either maxAge or expiresAt must be provided',
      );

  /// Factory constructor for creating a policy with duration from now.
  /// ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  factory CachePolicy.duration({
    required Duration duration,
    String? encryptionKey,
    int? maxSize,
  }) {
    return CachePolicy(
      maxAge: duration,
      encryptionKey: encryptionKey,
      maxSize: maxSize,
    );
  }

  /// Factory constructor for creating a policy with specific expiration time.
  /// ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  factory CachePolicy.expiresAt({
    required DateTime expirationTime,
    String? encryptionKey,
    int? maxSize,
  }) {
    return CachePolicy(
      expiresAt: expirationTime,
      encryptionKey: encryptionKey,
      maxSize: maxSize,
    );
  }

  /// Factory constructor for creating a policy that expires in X minutes.
  /// ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô X ‡∏ô‡∏≤‡∏ó‡∏µ
  factory CachePolicy.inMinutes(
    int minutes, {
    String? encryptionKey,
    int? maxSize,
  }) {
    return CachePolicy(
      maxAge: Duration(minutes: minutes),
      encryptionKey: encryptionKey,
      maxSize: maxSize,
    );
  }

  /// Factory constructor for creating a policy that expires in X hours.
  /// ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô X ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  factory CachePolicy.inHours(
    int hours, {
    String? encryptionKey,
    int? maxSize,
  }) {
    return CachePolicy(
      maxAge: Duration(hours: hours),
      encryptionKey: encryptionKey,
      maxSize: maxSize,
    );
  }

  /// Factory constructor for creating a policy that expires in X days.
  /// ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô X ‡∏ß‡∏±‡∏ô
  factory CachePolicy.inDays(int days, {String? encryptionKey, int? maxSize}) {
    return CachePolicy(
      maxAge: Duration(days: days),
      encryptionKey: encryptionKey,
      maxSize: maxSize,
    );
  }

  /// Factory constructor for creating a policy that expires at end of day.
  /// ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏ß‡∏±‡∏ô
  factory CachePolicy.endOfDay({String? encryptionKey, int? maxSize}) {
    final now = DateTime.now();
    final endOfDay = DateTime(now.year, now.month, now.day, 23, 59, 59);
    return CachePolicy(
      expiresAt: endOfDay,
      encryptionKey: encryptionKey,
      maxSize: maxSize,
    );
  }

  /// Factory constructor for creating a policy that expires at end of week.
  /// ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏õ‡∏î‡∏≤‡∏´‡πå
  factory CachePolicy.endOfWeek({String? encryptionKey, int? maxSize}) {
    final now = DateTime.now();
    final daysUntilSunday = 7 - now.weekday;
    final endOfWeek = DateTime(
      now.year,
      now.month,
      now.day + daysUntilSunday,
      23,
      59,
      59,
    );
    return CachePolicy(
      expiresAt: endOfWeek,
      encryptionKey: encryptionKey,
      maxSize: maxSize,
    );
  }

  /// Factory constructor for creating a policy that expires at end of month.
  /// ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  factory CachePolicy.endOfMonth({String? encryptionKey, int? maxSize}) {
    final now = DateTime.now();
    final endOfMonth = DateTime(now.year, now.month + 1, 0, 23, 59, 59);
    return CachePolicy(
      expiresAt: endOfMonth,
      encryptionKey: encryptionKey,
      maxSize: maxSize,
    );
  }

  /// Factory constructor for creating a never-expiring policy.
  /// ‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ü‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  factory CachePolicy.never({String? encryptionKey, int? maxSize}) {
    return CachePolicy(
      maxAge: Duration(days: 365 * 100), // 100 years - practically never
      encryptionKey: encryptionKey,
      maxSize: maxSize,
    );
  }

  /// Gets the effective expiration date/time.
  /// ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•
  ///
  /// Priority: expiresAt > maxAge calculation
  /// ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: expiresAt > ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å maxAge
  DateTime? getExpirationTime([DateTime? baseTime]) {
    // If specific expiration time is set, use it
    if (expiresAt != null) {
      return expiresAt;
    }

    // Otherwise, calculate from maxAge
    if (maxAge != null) {
      final base = baseTime ?? DateTime.now();
      return base.add(maxAge!);
    }

    return null;
  }

  /// Gets the remaining time until expiration.
  /// ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  Duration? getRemainingTime([DateTime? baseTime]) {
    final expiration = getExpirationTime(baseTime);
    if (expiration == null) return null;

    final now = baseTime ?? DateTime.now();
    final remaining = expiration.difference(now);
    return remaining.isNegative ? Duration.zero : remaining;
  }

  /// Checks if this policy would be expired at the given time.
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  bool isExpiredAt(DateTime checkTime, [DateTime? creationTime]) {
    final expiration = getExpirationTime(creationTime);
    if (expiration == null) return false;
    return checkTime.isAfter(expiration);
  }

  /// Creates a copy of this policy with modified parameters.
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
  CachePolicy copyWith({
    Duration? maxAge,
    DateTime? expiresAt,
    String? encryptionKey,
    int? maxSize,
  }) {
    return CachePolicy(
      maxAge: maxAge ?? this.maxAge,
      expiresAt: expiresAt ?? this.expiresAt,
      encryptionKey: encryptionKey ?? this.encryptionKey,
      maxSize: maxSize ?? this.maxSize,
    );
  }
}
