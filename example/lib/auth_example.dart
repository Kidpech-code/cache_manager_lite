import 'package:flutter/material.dart';
import 'package:cache_manager_lite/cache_manager_lite.dart';
import 'dart:math';

void main() {
  runApp(AuthApp());
}

class AuthApp extends StatelessWidget {
  const AuthApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Authentication Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        useMaterial3: true,
      ),
      home: AuthenticationExample(),
    );
  }
}

class AuthenticationExample extends StatefulWidget {
  const AuthenticationExample({super.key});

  @override
  createState() => _AuthenticationExampleState();
}

class _AuthenticationExampleState extends State<AuthenticationExample> {
  // Cache Manager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Authentication
  late final CacheManagerLite cacheManager;
  bool _isInitialized = false;
  bool _isLoggedIn = false;
  bool _isLoading = false;

  // User Data
  Map<String, dynamic>? _userProfile;
  String? _accessToken;
  String? _refreshToken;
  DateTime? _tokenExpiry;

  // Controllers
  final _usernameController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _initializeAuth();
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  Future<void> _initializeAuth() async {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Cache Manager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auth
    cacheManager = CacheManagerLite.forBeginner(
      appType: AppType.ecommerce,
      cacheSize: CacheSize.medium,
    );

    setState(() {
      _isInitialized = true;
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
    await _checkExistingSession();
  }

  @override
  Widget build(BuildContext context) {
    if (!_isInitialized) {
      return Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text('Authentication Example'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
        actions: [
          if (_isLoggedIn)
            IconButton(
              icon: Icon(Icons.logout),
              onPressed: _logout,
              tooltip: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
            ),
        ],
      ),
      body: _isLoggedIn ? _buildDashboard() : _buildLoginForm(),
    );
  }

  Widget _buildLoginForm() {
    return SingleChildScrollView(
      padding: EdgeInsets.all(24),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // Header
          Card(
            elevation: 4,
            child: Padding(
              padding: EdgeInsets.all(24),
              child: Column(
                children: [
                  Icon(Icons.lock, size: 64, color: Colors.blue),
                  SizedBox(height: 16),
                  Text(
                    '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    '‡∏£‡∏∞‡∏ö‡∏ö Authentication ‡∏î‡πâ‡∏ß‡∏¢ Cache',
                    style: TextStyle(
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
          ),

          SizedBox(height: 32),

          // Username field
          TextField(
            controller: _usernameController,
            decoration: InputDecoration(
              labelText: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
              prefixIcon: Icon(Icons.person),
              border: OutlineInputBorder(),
              hintText: '‡∏•‡∏≠‡∏á: admin, user, demo',
            ),
          ),

          SizedBox(height: 16),

          // Password field
          TextField(
            controller: _passwordController,
            obscureText: true,
            decoration: InputDecoration(
              labelText: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
              prefixIcon: Icon(Icons.lock),
              border: OutlineInputBorder(),
              hintText: '‡∏•‡∏≠‡∏á: password, 123456',
            ),
          ),

          SizedBox(height: 24),

          // Login button
          ElevatedButton(
            onPressed: _isLoading ? null : _login,
            style: ElevatedButton.styleFrom(
              padding: EdgeInsets.symmetric(vertical: 16),
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
            ),
            child: _isLoading
                ? Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                        ),
                      ),
                      SizedBox(width: 12),
                      Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...'),
                    ],
                  )
                : Text(
                    '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                    style: TextStyle(fontSize: 16),
                  ),
          ),

          SizedBox(height: 16),

          // Demo accounts info
          Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue[50],
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.blue[200]!),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'üß™ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.blue[700],
                  ),
                ),
                SizedBox(height: 8),
                Text('‚Ä¢ admin / password (‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö)'),
                Text('‚Ä¢ user / 123456 (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)'),
                Text('‚Ä¢ demo / demo (‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö)'),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDashboard() {
    return SingleChildScrollView(
      padding: EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // Welcome Card
          Card(
            elevation: 4,
            child: Padding(
              padding: EdgeInsets.all(20),
              child: Column(
                children: [
                  CircleAvatar(
                    radius: 40,
                    backgroundColor: Colors.blue,
                    child: Icon(Icons.person, size: 40, color: Colors.white),
                  ),
                  SizedBox(height: 16),
                  Text(
                    '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö, ${_userProfile?['name'] ?? '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'}!',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 8),
                  Text(
                    '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ${_userProfile?['role'] ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}',
                    style: TextStyle(
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
          ),

          SizedBox(height: 20),

          // Auth Info Section
          _buildSectionCard(
            title: 'üîê ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô',
            children: [
              _buildInfoRow('Access Token', _maskedToken(_accessToken)),
              _buildInfoRow('Refresh Token', _maskedToken(_refreshToken)),
              _buildInfoRow('‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏', _formatExpiry()),
              _buildInfoRow('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', _getTokenStatus()),
            ],
          ),

          SizedBox(height: 16),

          // Cache Status Section
          _buildCacheStatusSection(),

          SizedBox(height: 16),

          // User Profile Section
          _buildSectionCard(
            title: 'üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
            children: [
              _buildInfoRow('ID', _userProfile?['id']?.toString() ?? '-'),
              _buildInfoRow('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', _userProfile?['username'] ?? '-'),
              _buildInfoRow('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', _userProfile?['email'] ?? '-'),
              _buildInfoRow('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', _userProfile?['lastLogin'] ?? '-'),
            ],
          ),

          SizedBox(height: 20),

          // Action Buttons
          Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _refreshToken != null ? _refreshAccessToken : null,
                  icon: Icon(Icons.refresh),
                  label: Text('‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ Token'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                  ),
                ),
              ),
              SizedBox(width: 12),
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: _clearCache,
                  icon: Icon(Icons.clear_all),
                  label: Text('‡∏•‡πâ‡∏≤‡∏á Cache'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.orange,
                    foregroundColor: Colors.white,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildSectionCard({required String title, required List<Widget> children}) {
    return Card(
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.blue[700],
              ),
            ),
            SizedBox(height: 12),
            ...children,
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: TextStyle(
                fontWeight: FontWeight.w500,
                color: Colors.grey[700],
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                fontFamily: 'monospace',
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCacheStatusSection() {
    return FutureBuilder<List<Map<String, dynamic>>>(
      future: _getCacheStatus(),
      builder: (context, snapshot) {
        return _buildSectionCard(
          title: 'üíæ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Cache',
          children: [
            if (snapshot.connectionState == ConnectionState.waiting)
              Center(child: CircularProgressIndicator())
            else if (snapshot.hasError)
              Text('Error: ${snapshot.error}')
            else if (snapshot.hasData) ...[
              for (var item in snapshot.data!) _buildInfoRow(item['key'], item['status']),
            ] else
              Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cache'),
          ],
        );
      },
    );
  }

  Future<void> _login() async {
    final username = _usernameController.text.trim();
    final password = _passwordController.text.trim();

    if (username.isEmpty || password.isEmpty) {
      _showMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', isError: true);
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      await Future.delayed(Duration(seconds: 2));

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö credentials
      final authResult = _validateCredentials(username, password);

      if (authResult != null) {
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å tokens ‡πÅ‡∏•‡∏∞ user profile
        await _saveAuthData(authResult);

        setState(() {
          _isLoggedIn = true;
          _userProfile = authResult['user'];
          _accessToken = authResult['accessToken'];
          _refreshToken = authResult['refreshToken'];
          _tokenExpiry = DateTime.now().add(Duration(hours: 1));
        });

        _showMessage('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

        // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        _usernameController.clear();
        _passwordController.clear();
      } else {
        _showMessage('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', isError: true);
      }
    } catch (e) {
      _showMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e', isError: true);
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _logout() async {
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• authentication ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ clear ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    await cacheManager.clear();

    setState(() {
      _isLoggedIn = false;
      _userProfile = null;
      _accessToken = null;
      _refreshToken = null;
      _tokenExpiry = null;
    });

    _showMessage('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
  }

  Future<void> _checkExistingSession() async {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tokens ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
      final accessToken = await cacheManager.get('access_token');
      final refreshToken = await cacheManager.get('refresh_token');
      final userProfile = await cacheManager.get('user_profile');
      final tokenExpiryStr = await cacheManager.get('token_expiry');

      if (accessToken != null && userProfile != null) {
        setState(() {
          _accessToken = accessToken;
          _refreshToken = refreshToken;
          _userProfile = Map<String, dynamic>.from(userProfile);
          _tokenExpiry = tokenExpiryStr != null ? DateTime.parse(tokenExpiryStr) : null;
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (_tokenExpiry != null && DateTime.now().isAfter(_tokenExpiry!)) {
          if (_refreshToken != null) {
            await _refreshAccessToken();
          } else {
            await _logout();
            _showMessage('Session ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà', isError: true);
            return;
          }
        }

        setState(() {
          _isLoggedIn = true;
        });

        _showMessage('‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (e, stack) {
      // Log and notify so the error isn't silently ignored.
      _showMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô session: $e', isError: true);
      debugPrint('Session restore error: $e\n$stack');
    }
  }

  Future<void> _saveAuthData(Map<String, dynamic> authResult) async {
    if (!_isInitialized) return;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å access token (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
    await cacheManager.put(
      key: 'access_token',
      value: authResult['accessToken'],
      policy: CachePolicy(maxAge: Duration(hours: 1)),
    );

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å refresh token (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô)
    await cacheManager.put(
      key: 'refresh_token',
      value: authResult['refreshToken'],
      policy: CachePolicy(maxAge: Duration(days: 7)),
    );

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å user profile (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
    await cacheManager.put(
      key: 'user_profile',
      value: authResult['user'],
      policy: CachePolicy(maxAge: Duration(hours: 24)),
    );

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    final expiry = DateTime.now().add(Duration(hours: 1));
    await cacheManager.put(
      key: 'token_expiry',
      value: expiry.toIso8601String(),
      policy: CachePolicy(maxAge: Duration(hours: 1)),
    );
  }

  Future<void> _refreshAccessToken() async {
    if (_refreshToken == null || !_isInitialized) {
      _showMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ token ‡πÑ‡∏î‡πâ', isError: true);
      return;
    }

    try {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refresh token API
      await Future.delayed(Duration(seconds: 1));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á access token ‡πÉ‡∏´‡∏°‡πà
      final newAccessToken = _generateToken();
      final newExpiry = DateTime.now().add(Duration(hours: 1));

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡πÉ‡∏´‡∏°‡πà
      await cacheManager.put(
        key: 'access_token',
        value: newAccessToken,
        policy: CachePolicy(maxAge: Duration(hours: 1)),
      );

      await cacheManager.put(
        key: 'token_expiry',
        value: newExpiry.toIso8601String(),
        policy: CachePolicy(maxAge: Duration(hours: 1)),
      );

      setState(() {
        _accessToken = newAccessToken;
        _tokenExpiry = newExpiry;
      });

      _showMessage('‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (e) {
      _showMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ token ‡πÑ‡∏î‡πâ: $e', isError: true);
    }
  }

  Future<void> _clearCache() async {
    try {
      await cacheManager.clear();
      _showMessage('‡∏•‡πâ‡∏≤‡∏á cache ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      await _logout();
    } catch (e) {
      _showMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á cache ‡πÑ‡∏î‡πâ: $e', isError: true);
    }
  }

  Future<List<Map<String, dynamic>>> _getCacheStatus() async {
    final keys = ['access_token', 'refresh_token', 'user_profile', 'token_expiry'];
    final List<Map<String, dynamic>> status = [];

    for (final key in keys) {
      final exists = await cacheManager.exists(key);
      final info = await cacheManager.getEntryInfo(key);

      status.add({
        'key': key,
        'status': exists ? '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${info?.remainingTime != null ? " (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${_formatDuration(info!.remainingTime!)})" : ""}' : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      });
    }

    return status;
  }

  Map<String, dynamic>? _validateCredentials(String username, String password) {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö credentials
    final users = {
      'admin': {
        'password': 'password',
        'user': {
          'id': 1,
          'username': 'admin',
          'name': '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
          'email': 'admin@example.com',
          'role': 'Administrator',
          'lastLogin': DateTime.now().subtract(Duration(hours: 2)).toString(),
        }
      },
      'user': {
        'password': '123456',
        'user': {
          'id': 2,
          'username': 'user',
          'name': '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
          'email': 'user@example.com',
          'role': 'User',
          'lastLogin': DateTime.now().subtract(Duration(minutes: 30)).toString(),
        }
      },
      'demo': {
        'password': 'demo',
        'user': {
          'id': 3,
          'username': 'demo',
          'name': '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          'email': 'demo@example.com',
          'role': 'Demo User',
          'lastLogin': DateTime.now().subtract(Duration(days: 1)).toString(),
        }
      },
    };

    if (users.containsKey(username) && users[username]!['password'] == password) {
      return {
        'accessToken': _generateToken(),
        'refreshToken': _generateToken(),
        'user': users[username]!['user'],
      };
    }

    return null;
  }

  String _generateToken() {
    final random = Random();
    final chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    return List.generate(32, (index) => chars[random.nextInt(chars.length)]).join();
  }

  String _maskedToken(String? token) {
    if (token == null) return '-';
    if (token.length <= 8) return token;
    return '${token.substring(0, 4)}...${token.substring(token.length - 4)}';
  }

  String _formatExpiry() {
    if (_tokenExpiry == null) return '-';

    final remaining = _tokenExpiry!.difference(DateTime.now());
    if (remaining.isNegative) {
      return '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
    }

    return '${_formatDuration(remaining)} (${_tokenExpiry!.toString().substring(0, 19)})';
  }

  String _getTokenStatus() {
    if (_tokenExpiry == null) return '-';

    final remaining = _tokenExpiry!.difference(DateTime.now());
    if (remaining.isNegative) {
      return 'üî¥ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
    } else if (remaining.inMinutes < 10) {
      return 'üü° ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏';
    } else {
      return 'üü¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ';
    }
  }

  String _formatDuration(Duration duration) {
    if (duration.inDays > 0) {
      return '${duration.inDays} ‡∏ß‡∏±‡∏ô ${duration.inHours.remainder(24)} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á';
    } else if (duration.inHours > 0) {
      return '${duration.inHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${duration.inMinutes.remainder(60)} ‡∏ô‡∏≤‡∏ó‡∏µ';
    } else {
      return '${duration.inMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ';
    }
  }

  void _showMessage(String message, {bool isError = false}) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: isError ? Colors.red : Colors.green,
          duration: Duration(seconds: 3),
        ),
      );
    }
  }
}
