/// A high-performance, user-friendly, and secure cache manager for Flutter.
///
/// This library provides a comprehensive caching solution with support for:
/// - Multiple user skill levels (Beginner to Expert)
/// - Flexible expiration management
/// - Optional AES encryption
/// - Real-time monitoring
/// - Multi-platform support
///
/// ## Quick Start
///
/// ```dart
/// import 'package:cache_manager_lite/cache_manager_lite.dart';
///
/// // Create a cache manager
/// final cacheManager = CacheManagerLite.forBeginner();
///
/// // Store data
/// await cacheManager.putForHours(
///   key: 'user_profile',
///   value: userProfile,
///   hours: 1,
/// );
///
/// // Retrieve data
/// final profile = await cacheManager.get('user_profile');
/// ```
library;

export 'src/domain/entities/cache_config.dart';
export 'src/domain/entities/cache_entry.dart';
export 'src/domain/entities/cache_policy.dart';
export 'src/domain/entities/scalable_cache_config.dart';
import 'package:dio/dio.dart';

import 'src/data/datasources/dio_cache_interceptor.dart';
import 'src/data/datasources/dio_data_source.dart';
import 'src/data/datasources/hive_data_source.dart';
import 'src/data/repositories/hive_cache_repository.dart';
import 'src/domain/entities/cache_config.dart';
import 'src/domain/entities/cache_entry.dart';
import 'src/domain/entities/cache_policy.dart';
import 'src/domain/entities/scalable_cache_config.dart';
import 'src/domain/usecases/clear_cache_use_case.dart';
import 'src/domain/usecases/get_cache_use_case.dart';
import 'src/domain/usecases/put_cache_use_case.dart';
import 'src/utils/encryption_utils.dart' as utils;

/// **CacheManagerLite - ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏á‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢**
///
/// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä‡πÉ‡∏ô Flutter Application ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
/// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™, ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ
///
/// ## üéØ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
///
/// CacheManagerLite ‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô Flutter
/// ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON, Bytes, ‡πÅ‡∏•‡∏∞ Object ‡∏ï‡πà‡∏≤‡∏á‡πÜ
/// ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
///
/// ## üöÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
///
/// ```dart
/// // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
/// final cacheManager = CacheManagerLite();
///
/// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
/// await cacheManager.putForHours(
///   key: 'user_profile',
///   value: userProfileData,
///   hours: 1,
/// );
///
/// // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
/// final profile = await cacheManager.get('user_profile');
/// ```
///
/// ## ‚ö° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
///
/// ```dart
/// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ E-commerce ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
/// final cacheManager = CacheManagerLite.forAdvanced(
///   appType: AppType.ecommerce,
///   cacheSize: CacheSize.large,
///   performanceLevel: PerformanceLevel.high,
///   enableEncryption: true,
///   encryptionKey: 'my-secret-key-2024',
/// );
///
/// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏ß‡∏±‡∏ô
/// await cacheManager.putUntilEndOfDay(
///   key: 'product_${productId}',
///   value: productData,
///   encryptionKey: 'product-encryption-key',
/// );
/// ```
///
/// ## üîß ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ Custom ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
///
/// ```dart
/// // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
/// final customPolicy = CachePolicy.expiresAt(
///   expirationTime: DateTime(2024, 12, 31, 23, 59, 59),
///   encryptionKey: 'ultra-secure-key',
/// );
///
/// final cacheManager = CacheManagerLite.custom(
///   customSizeBytes: 100 * 1024 * 1024, // 100MB
///   customPolicy: customPolicy,
///   appType: AppType.gaming,
///   enableEncryption: true,
///   memoryCacheRatio: 0.3, // ‡πÉ‡∏ä‡πâ RAM 30%
/// );
/// ```
///
/// ## üìä ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
///
/// ```dart
/// // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
/// final info = await cacheManager.getEntryInfo('important_data');
/// if (info != null) {
///   print('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${info.statusDescription}');
///   print('‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${info.expiresAt}');
///   print('‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${info.remainingTime}');
///   print('‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏Ñ‡∏ä: ${info.age}');
/// }
///
/// // ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
/// await cacheManager.extendExpiration(
///   key: 'important_data',
///   additionalTime: Duration(hours: 2),
/// );
/// ```
///
/// ## üéÆ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Gaming App
///
/// ```dart
/// final gameCache = CacheManagerLite.forExpert(
///   cacheSize: CacheSize.large,
///   performanceLevel: PerformanceLevel.ultra,
///   appType: AppType.gaming,
///   enableEncryption: true,
///   memoryCacheRatio: 0.25, // ‡πÉ‡∏ä‡πâ RAM 25% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
/// );
///
/// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
/// await gameCache.putForHours(
///   key: 'player_${playerId}',
///   value: playerStats,
///   hours: 2,
/// );
///
/// // ‡πÄ‡∏Å‡πá‡∏ö Leaderboard ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
/// await gameCache.putUntilEndOfDay(
///   key: 'daily_leaderboard',
///   value: leaderboardData,
/// );
/// ```
class CacheManagerLite {
  /// **‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (customizable)**
  ///
  /// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏ä ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î, ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  ///
  /// **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ custom:**
  /// ```dart
  /// final config = CacheConfig(
  ///   maxCacheSize: 50 * 1024 * 1024, // 50MB
  ///   defaultPolicy: CachePolicy.inHours(6), // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏∏‡∏Å 6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  /// );
  ///
  /// final cacheManager = CacheManagerLite(config: config);
  /// ```
  final CacheConfig? config;

  /// **‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ (highly customizable)**
  ///
  /// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏≠‡∏õ‡∏ï‡πà‡∏≤‡∏á‡πÜ
  /// ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
  ///
  /// **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£ custom:**
  /// ```dart
  /// final scalableConfig = ScalableCacheConfig.forExpert(
  ///   cacheSize: CacheSize.large,
  ///   performanceLevel: PerformanceLevel.ultra,
  ///   appType: AppType.ecommerce,
  ///   customSizeBytes: 200 * 1024 * 1024, // 200MB custom
  ///   enableEncryption: true,
  ///   encryptionKey: 'my-ultra-secure-key-2024',
  ///   memoryCacheRatio: 0.2, // ‡πÉ‡∏ä‡πâ RAM 20%
  /// );
  ///
  /// final cacheManager = CacheManagerLite(scalableConfig: scalableConfig);
  /// ```
  final ScalableCacheConfig? scalableConfig;

  // ========================================
  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (Internal Variables)
  // ========================================

  /// **‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Hive (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ custom ‡πÑ‡∏î‡πâ)**
  ///
  /// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Hive NoSQL
  /// ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä
  late final HiveDataSource _hiveDataSource;

  /// **‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HTTP (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ custom ‡πÑ‡∏î‡πâ)**
  ///
  /// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏ú‡πà‡∏≤‡∏ô Dio HTTP Client
  /// ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Ñ‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö response
  late final DioDataSource _dioDataSource;

  /// **Repository ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ custom ‡πÑ‡∏î‡πâ)**
  ///
  /// ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Business Logic ‡πÅ‡∏•‡∏∞ Data Source
  /// ‡∏ï‡∏≤‡∏° Clean Architecture pattern
  late final HiveCacheRepository _repository;

  /// **Use Case ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ custom ‡πÑ‡∏î‡πâ)**
  ///
  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Business Logic ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ä
  /// ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  late final GetCacheUseCase _getCacheUseCase;

  /// **Use Case ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ custom ‡πÑ‡∏î‡πâ)**
  ///
  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Business Logic ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÅ‡∏Ñ‡∏ä
  /// ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  late final PutCacheUseCase _putCacheUseCase;

  /// **Use Case ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ custom ‡πÑ‡∏î‡πâ)**
  ///
  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Business Logic ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  late final ClearCacheUseCase _clearCacheUseCase;

  // ========================================
  // Constructors (‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á)
  // ========================================

  /// **Constructor ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á CacheManagerLite**
  ///
  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á CacheManagerLite ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[config]**: ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (optional)
  ///   ```dart
  ///   final config = CacheConfig(
  ///     maxCacheSize: 100 * 1024 * 1024, // 100MB
  ///     defaultPolicy: CachePolicy.inHours(4),
  ///   );
  ///   ```
  ///
  /// - **[scalableConfig]**: ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ (optional)
  ///   ```dart
  ///   final scalableConfig = ScalableCacheConfig.forAdvanced(
  ///     appType: AppType.social,
  ///     cacheSize: CacheSize.large,
  ///     performanceLevel: PerformanceLevel.high,
  ///   );
  ///   ```
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
  /// final cacheManager = CacheManagerLite();
  ///
  /// // ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏á
  /// final cacheManager = CacheManagerLite(
  ///   config: CacheConfig(
  ///     maxCacheSize: 50 * 1024 * 1024,
  ///     defaultPolicy: CachePolicy.inDays(1),
  ///   ),
  /// );
  ///
  /// // ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡πÉ‡∏´‡∏ç‡πà
  /// final cacheManager = CacheManagerLite(
  ///   scalableConfig: ScalableCacheConfig.forExpert(
  ///     cacheSize: CacheSize.enterprise,
  ///     performanceLevel: PerformanceLevel.ultra,
  ///     appType: AppType.ecommerce,
  ///   ),
  /// );
  /// ```
  CacheManagerLite({this.config, this.scalableConfig}) {
    _initialize();
  }

  /// **Factory Constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å**
  ///
  /// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ‡πÅ‡∏≠‡∏õ Utility, Todo App, Calculator, Simple Tools
  ///
  /// ## ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
  /// - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä: 10-25MB
  /// - ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: Balanced
  /// - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ
  /// - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[appType]**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (default: AppType.utility)
  ///   - `AppType.utility` - ‡πÅ‡∏≠‡∏õ utility ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  ///   - `AppType.social` - ‡πÅ‡∏≠‡∏õ social media
  ///   - `AppType.ecommerce` - ‡πÅ‡∏≠‡∏õ e-commerce
  ///   - `AppType.gaming` - ‡πÅ‡∏≠‡∏õ gaming
  ///
  /// - **[enableEncryption]**: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (default: false)
  ///   - `true` - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ AES
  ///   - `false` - ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤)
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Todo ‡∏á‡πà‡∏≤‡∏¢‡πÜ
  /// final cacheManager = CacheManagerLite.small();
  ///
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Social ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  /// final cacheManager = CacheManagerLite.small(
  ///   appType: AppType.social,
  ///   enableEncryption: true,
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  /// await cacheManager.putForHours(
  ///   key: 'user_profile',
  ///   value: profileData,
  ///   hours: 2,
  /// );
  /// ```
  factory CacheManagerLite.small({
    AppType appType = AppType.utility,
    bool enableEncryption = false,
  }) {
    return CacheManagerLite(
      scalableConfig: ScalableCacheConfig.small(
        appType: appType,
        enableEncryption: enableEncryption,
      ),
    );
  }

  /// **Factory Constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á**
  ///
  /// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: Social Media App, News App, Weather App, Medium-sized Apps
  ///
  /// ## ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
  /// - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä: 25-75MB
  /// - ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: High
  /// - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ
  /// - Background cleanup: ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[appType]**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (default: AppType.social)
  /// - **[enableEncryption]**: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (default: false)
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Social Media
  /// final cacheManager = CacheManagerLite.medium(
  ///   appType: AppType.social,
  ///   enableEncryption: true,
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  /// await cacheManager.putUntilEndOfDay(
  ///   key: 'today_posts',
  ///   value: postsData,
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  /// await cacheManager.putForDays(
  ///   key: 'profile_image_$userId',
  ///   value: imageBytes,
  ///   days: 7,
  ///   encryptionKey: 'image-key-2024',
  /// );
  /// ```
  factory CacheManagerLite.medium({
    AppType appType = AppType.social,
    bool enableEncryption = false,
  }) {
    return CacheManagerLite(
      scalableConfig: ScalableCacheConfig.medium(
        appType: appType,
        enableEncryption: enableEncryption,
      ),
    );
  }

  /// **Factory Constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà**
  ///
  /// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: E-commerce App, Enterprise App, Media Streaming App
  ///
  /// ## ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
  /// - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä: 75-200MB
  /// - ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: Ultra High
  /// - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  /// - Background cleanup: ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
  /// - Memory optimization: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[appType]**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (default: AppType.ecommerce)
  /// - **[enableEncryption]**: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (default: true)
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ E-commerce
  /// final cacheManager = CacheManagerLite.large(
  ///   appType: AppType.ecommerce,
  ///   enableEncryption: true,
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  /// await cacheManager.putForHours(
  ///   key: 'products_category_$categoryId',
  ///   value: productsData,
  ///   hours: 6,
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  /// await cacheManager.putForMinutes(
  ///   key: 'cart_$userId',
  ///   value: cartData,
  ///   minutes: 30,
  ///   encryptionKey: 'cart-secure-key',
  /// );
  /// ```
  factory CacheManagerLite.large({
    AppType appType = AppType.ecommerce,
    bool enableEncryption = true,
  }) {
    return CacheManagerLite(
      scalableConfig: ScalableCacheConfig.large(
        appType: appType,
        enableEncryption: enableEncryption,
      ),
    );
  }

  /// **Factory Constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ (Enterprise)**
  ///
  /// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: Banking App, Medical App, Government App, High-Security Apps
  ///
  /// ## ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥:
  /// - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä: 200MB+
  /// - ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: Maximum
  /// - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ Custom Key
  /// - Security: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  /// - Background cleanup: ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
  /// - Memory management: ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[appType]**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (default: AppType.ecommerce)
  /// - **[encryptionKey]**: ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (highly recommended)
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Banking
  /// final cacheManager = CacheManagerLite.enterprise(
  ///   appType: AppType.ecommerce,
  ///   encryptionKey: 'ultra-secure-banking-key-2024',
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  /// await cacheManager.putForMinutes(
  ///   key: 'account_$accountId',
  ///   value: accountData,
  ///   minutes: 15, // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö Session token ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  /// await cacheManager.putForHours(
  ///   key: 'auth_token_$userId',
  ///   value: tokenData,
  ///   hours: 1,
  ///   encryptionKey: 'session-ultra-secure-key',
  /// );
  /// ```
  factory CacheManagerLite.enterprise({
    AppType appType = AppType.ecommerce,
    String? encryptionKey,
  }) {
    return CacheManagerLite(
      scalableConfig: ScalableCacheConfig.enterprise(
        appType: appType,
        encryptionKey: encryptionKey,
      ),
    );
  }

  // ===============================
  // User Level Factory Constructors (‡∏ï‡∏±‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
  // ===============================

  /// **üü¢ Factory Constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Beginner)**
  ///
  /// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Ñ‡∏ä, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  ///
  /// ## üéØ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Beginner:
  /// - ‚úÖ API ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
  /// - ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  /// - ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[appType]**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ (default: AppType.utility)
  ///   - `AppType.utility` - ‡πÅ‡∏≠‡∏õ utility ‡∏á‡πà‡∏≤‡∏¢‡πÜ
  ///   - `AppType.social` - ‡πÅ‡∏≠‡∏õ social ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  ///
  /// - **[cacheSize]**: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä (default: CacheSize.small)
  ///   - `CacheSize.small` - 10-25MB
  ///   - `CacheSize.medium` - 25-50MB
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Todo ‡∏á‡πà‡∏≤‡∏¢‡πÜ
  /// final cacheManager = CacheManagerLite.forBeginner();
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡πà‡∏≤‡∏¢‡πÜ
  /// await cacheManager.putForHours(
  ///   key: 'todo_list',
  ///   value: todoItems,
  ///   hours: 24,
  /// );
  ///
  /// // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
  /// final todos = await cacheManager.get('todo_list');
  ///
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Social ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  /// final socialCache = CacheManagerLite.forBeginner(
  ///   appType: AppType.social,
  ///   cacheSize: CacheSize.medium,
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
  /// await socialCache.putUntilEndOfDay(
  ///   key: 'today_posts',
  ///   value: posts,
  /// );
  /// ```
  factory CacheManagerLite.forBeginner({
    AppType appType = AppType.utility,
    CacheSize cacheSize = CacheSize.small,
  }) {
    return CacheManagerLite(
      scalableConfig: ScalableCacheConfig.forBeginner(
        appType: appType,
        cacheSize: cacheSize,
      ),
    );
  }

  /// **üîµ Factory Constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á (Intermediate)**
  ///
  /// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ö‡πâ‡∏≤‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
  ///
  /// ## üéØ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Intermediate:
  /// - ‚úÖ ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á Beginner
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
  /// - ‚úÖ Batch operations
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Ñ‡∏ä
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[appType]**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ (default: AppType.social)
  /// - **[cacheSize]**: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä (default: CacheSize.medium)
  /// - **[performanceLevel]**: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û (default: PerformanceLevel.balanced)
  ///   - `PerformanceLevel.low` - ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô
  ///   - `PerformanceLevel.balanced` - ‡∏™‡∏°‡∏î‡∏∏‡∏•
  ///   - `PerformanceLevel.high` - ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
  /// - **[enableEncryption]**: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (default: false)
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Social Media ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á
  /// final cacheManager = CacheManagerLite.forIntermediate(
  ///   appType: AppType.social,
  ///   cacheSize: CacheSize.medium,
  ///   performanceLevel: PerformanceLevel.high,
  ///   enableEncryption: true,
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  /// await cacheManager.putForDays(
  ///   key: 'user_profile_$userId',
  ///   value: profileData,
  ///   days: 7,
  ///   encryptionKey: 'profile-key-2024',
  /// );
  ///
  /// // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏Ñ‡∏ä
  /// final info = await cacheManager.getEntryInfo('user_profile_$userId');
  /// print('‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤: ${info?.remainingTime}');
  ///
  /// // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö batch
  /// await cacheManager.putBatch({
  ///   'recent_posts': recentPosts,
  ///   'user_friends': friendsList,
  ///   'notifications': notifications,
  /// });
  /// ```
  factory CacheManagerLite.forIntermediate({
    AppType appType = AppType.social,
    CacheSize cacheSize = CacheSize.medium,
    PerformanceLevel performanceLevel = PerformanceLevel.balanced,
    bool enableEncryption = false,
  }) {
    return CacheManagerLite(
      scalableConfig: ScalableCacheConfig.forIntermediate(
        appType: appType,
        cacheSize: cacheSize,
        performanceLevel: performanceLevel,
        enableEncryption: enableEncryption,
      ),
    );
  }

  /// **üü† Factory Constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á (Advanced)**
  ///
  /// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
  ///
  /// ## üéØ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Advanced:
  /// - ‚úÖ ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á Intermediate
  /// - ‚úÖ Custom CachePolicy ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Memory Cache Ratio
  /// - ‚úÖ Custom Encryption Key
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  /// - ‚úÖ Real-time monitoring
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[appType]**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ (default: AppType.ecommerce)
  /// - **[cacheSize]**: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä (default: CacheSize.large)
  /// - **[performanceLevel]**: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û (default: PerformanceLevel.high)
  /// - **[enableEncryption]**: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (default: true)
  /// - **[encryptionKey]**: ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (customizable)
  /// - **[memoryCacheRatio]**: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô RAM ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (default: 0.15 = 15%)
  /// - **[customPolicy]**: ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (fully customizable)
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡∏™‡∏£‡πâ‡∏≤‡∏á Custom Policy
  /// final customPolicy = CachePolicy.expiresAt(
  ///   expirationTime: DateTime(2024, 12, 31, 23, 59, 59),
  ///   encryptionKey: 'advanced-key-2024',
  /// );
  ///
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ E-commerce ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
  /// final cacheManager = CacheManagerLite.forAdvanced(
  ///   appType: AppType.ecommerce,
  ///   cacheSize: CacheSize.large,
  ///   performanceLevel: PerformanceLevel.high,
  ///   enableEncryption: true,
  ///   encryptionKey: 'ecommerce-master-key-2024',
  ///   memoryCacheRatio: 0.2, // ‡πÉ‡∏ä‡πâ RAM 20%
  ///   customPolicy: customPolicy,
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° custom expiration
  /// await cacheManager.put(
  ///   key: 'product_$productId',
  ///   value: productData,
  ///   policy: CachePolicy.endOfMonth(
  ///     encryptionKey: 'product-specific-key',
  ///   ),
  /// );
  ///
  /// // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤
  /// final remaining = await cacheManager.getRemainingTime('product_$productId');
  /// if (remaining != null && remaining.inHours < 2) {
  ///   await cacheManager.extendExpiration(
  ///     key: 'product_$productId',
  ///     additionalTime: Duration(days: 7),
  ///   );
  /// }
  /// ```
  factory CacheManagerLite.forAdvanced({
    AppType appType = AppType.ecommerce,
    CacheSize cacheSize = CacheSize.large,
    PerformanceLevel performanceLevel = PerformanceLevel.high,
    bool enableEncryption = true,
    String? encryptionKey,
    double memoryCacheRatio = 0.15,
    CachePolicy? customPolicy,
  }) {
    return CacheManagerLite(
      scalableConfig: ScalableCacheConfig.forAdvanced(
        appType: appType,
        cacheSize: cacheSize,
        performanceLevel: performanceLevel,
        enableEncryption: enableEncryption,
        encryptionKey: encryptionKey,
        memoryCacheRatio: memoryCacheRatio,
        customPolicy: customPolicy,
      ),
    );
  }

  /// **üî¥ Factory Constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç (Expert)**
  ///
  /// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
  ///
  /// ## üéØ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Expert:
  /// - ‚úÖ ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á Advanced
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Custom Size ‡∏î‡πâ‡∏ß‡∏¢ Bytes
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Background Cleanup ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏π‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏î‡∏±‡∏ö Ultra
  /// - ‚úÖ Advanced Debugging Tools
  /// - ‚úÖ Real-time Cache Statistics
  /// - ‚úÖ Manual Memory Management
  /// - ‚úÖ Enterprise-level Security
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà custom ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:
  ///
  /// - **[cacheSize]**: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (required)
  /// - **[performanceLevel]**: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û (required)
  ///   - `PerformanceLevel.ultra` - ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  /// - **[appType]**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ (required)
  /// - **[customSizeBytes]**: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (highly customizable)
  ///   ```dart
  ///   customSizeBytes: 500 * 1024 * 1024, // 500MB custom
  ///   ```
  /// - **[enableEncryption]**: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (default: true)
  /// - **[encryptionKey]**: ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (fully customizable)
  /// - **[enableBackgroundCleanup]**: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (customizable)
  /// - **[memoryCacheRatio]**: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô RAM (default: 0.1 = 10%)
  /// - **[customPolicy]**: ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (fully customizable)
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ Enterprise Banking
  /// final expertCache = CacheManagerLite.forExpert(
  ///   cacheSize: CacheSize.enterprise,
  ///   performanceLevel: PerformanceLevel.ultra,
  ///   appType: AppType.ecommerce,
  ///   customSizeBytes: 1024 * 1024 * 1024, // 1GB custom
  ///   enableEncryption: true,
  ///   encryptionKey: 'ultra-secure-banking-key-2024',
  ///   enableBackgroundCleanup: true,
  ///   memoryCacheRatio: 0.05, // ‡πÉ‡∏ä‡πâ RAM ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 5% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  ///   customPolicy: CachePolicy.inMinutes(
  ///     15, // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  ///     encryptionKey: 'session-ultra-key',
  ///   ),
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  /// await expertCache.put(
  ///   key: 'account_$accountId',
  ///   value: sensitiveAccountData,
  ///   policy: CachePolicy.inMinutes(
  ///     10,
  ///     encryptionKey: 'account-ultra-secure-key',
  ///   ),
  /// );
  ///
  /// // Real-time monitoring
  /// Timer.periodic(Duration(seconds: 30), (timer) async {
  ///   final stats = await expertCache.getCacheStats();
  ///   print('Cache Usage: ${stats.usedPercentage}%');
  ///   print('Total Entries: ${stats.entryCount}');
  ///
  ///   // Auto cleanup if needed
  ///   if (stats.usedPercentage > 90) {
  ///     await expertCache.performMaintenance();
  ///   }
  /// });
  /// ```
  factory CacheManagerLite.forExpert({
    required CacheSize cacheSize,
    required PerformanceLevel performanceLevel,
    required AppType appType,
    int? customSizeBytes,
    bool enableEncryption = true,
    String? encryptionKey,
    bool enableBackgroundCleanup = true,
    double memoryCacheRatio = 0.1,
    CachePolicy? customPolicy,
  }) {
    return CacheManagerLite(
      scalableConfig: ScalableCacheConfig.forExpert(
        cacheSize: cacheSize,
        performanceLevel: performanceLevel,
        appType: appType,
        customSizeBytes: customSizeBytes,
        enableEncryption: enableEncryption,
        encryptionKey: encryptionKey,
        enableBackgroundCleanup: enableBackgroundCleanup,
        memoryCacheRatio: memoryCacheRatio,
        customPolicy: customPolicy,
      ),
    );
  }

  /// **‚öôÔ∏è Factory Constructor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (Custom)**
  ///
  /// ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  ///
  /// ## üéØ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Custom:
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö Byte-level
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á CachePolicy ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
  /// - ‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
  /// - ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  /// - ‚úÖ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Research & Development
  /// - ‚úÖ Perfect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Prototype ‡πÅ‡∏•‡∏∞ Testing
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á custom (required):
  ///
  /// - **[customSizeBytes]**: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö‡πÑ‡∏ö‡∏ï‡πå (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏)
  ///   ```dart
  ///   customSizeBytes: 150 * 1024 * 1024, // 150MB exactly
  ///   customSizeBytes: 512 * 1024 * 1024, // 512MB exactly
  ///   customSizeBytes: 2 * 1024 * 1024 * 1024, // 2GB exactly
  ///   ```
  ///
  /// - **[customPolicy]**: ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏)
  ///   ```dart
  ///   // Policy ‡πÅ‡∏ö‡∏ö‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
  ///   customPolicy: CachePolicy(
  ///     maxAge: Duration(minutes: 45),
  ///     expiresAt: DateTime(2024, 12, 25, 12, 0, 0),
  ///     encryptionKey: 'complex-key-with-rotation',
  ///   ),
  ///   ```
  ///
  /// ## ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ó‡∏µ‡πà custom ‡πÑ‡∏î‡πâ:
  ///
  /// - **[appType]**: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏≠‡∏õ (default: AppType.utility)
  /// - **[enableEncryption]**: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (default: true)
  /// - **[encryptionKey]**: ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏´‡∏•‡∏±‡∏Å (fully customizable)
  /// - **[enableBackgroundCleanup]**: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (default: true)
  /// - **[memoryCacheRatio]**: ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô RAM (default: 0.2 = 20%)
  ///
  /// ## ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
  ///
  /// ```dart
  /// // ===============================
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Research Application
  /// // ===============================
  ///
  /// final researchPolicy = CachePolicy.expiresAt(
  ///   expirationTime: DateTime.now().add(Duration(days: 30)),
  ///   encryptionKey: 'research-data-encryption-2024',
  /// );
  ///
  /// final researchCache = CacheManagerLite.custom(
  ///   customSizeBytes: 5 * 1024 * 1024 * 1024, // 5GB for large datasets
  ///   customPolicy: researchPolicy,
  ///   appType: AppType.utility,
  ///   enableEncryption: true,
  ///   encryptionKey: 'research-master-key',
  ///   memoryCacheRatio: 0.4, // ‡πÉ‡∏ä‡πâ RAM 40% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö dataset ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
  /// await researchCache.put(
  ///   key: 'ml_dataset_v1',
  ///   value: massiveDataset,
  ///   policy: CachePolicy.never(), // ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  /// );
  ///
  /// // ===============================
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IoT Application
  /// // ===============================
  ///
  /// final iotPolicy = CachePolicy.inMinutes(
  ///   5, // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏£‡πá‡∏ß
  ///   encryptionKey: 'iot-sensor-key',
  /// );
  ///
  /// final iotCache = CacheManagerLite.custom(
  ///   customSizeBytes: 10 * 1024 * 1024, // 10MB ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IoT
  ///   customPolicy: iotPolicy,
  ///   appType: AppType.utility,
  ///   enableEncryption: true,
  ///   memoryCacheRatio: 0.05, // ‡πÉ‡∏ä‡πâ RAM ‡πÄ‡∏û‡∏µ‡∏¢‡∏á 5%
  ///   enableBackgroundCleanup: false, // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£ cleanup ‡πÄ‡∏≠‡∏á
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sensor
  /// await iotCache.putForMinutes(
  ///   key: 'sensor_${sensorId}_${timestamp}',
  ///   value: sensorData,
  ///   minutes: 3,
  /// );
  ///
  /// // ===============================
  /// // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gaming Tournament
  /// // ===============================
  ///
  /// final tournamentPolicy = CachePolicy.expiresAt(
  ///   expirationTime: DateTime(2024, 6, 15, 20, 0, 0), // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏°‡∏ô‡∏ï‡πå
  ///   encryptionKey: 'tournament-security-key',
  /// );
  ///
  /// final tournamentCache = CacheManagerLite.custom(
  ///   customSizeBytes: 300 * 1024 * 1024, // 300MB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏°‡∏ô‡∏ï‡πå
  ///   customPolicy: tournamentPolicy,
  ///   appType: AppType.gaming,
  ///   enableEncryption: true,
  ///   encryptionKey: 'tournament-master-key-2024',
  ///   memoryCacheRatio: 0.3, // ‡πÉ‡∏ä‡πâ RAM 30% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á
  /// );
  ///
  /// // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏°‡∏ô‡∏ï‡πå
  /// await tournamentCache.put(
  ///   key: 'tournament_player_$playerId',
  ///   value: playerTournamentData,
  ///   policy: tournamentPolicy,
  /// );
  /// ```
  factory CacheManagerLite.custom({
    required int customSizeBytes,
    required CachePolicy customPolicy,
    AppType appType = AppType.utility,
    bool enableEncryption = true,
    String? encryptionKey,
    bool enableBackgroundCleanup = true,
    double memoryCacheRatio = 0.2,
  }) {
    return CacheManagerLite(
      scalableConfig: ScalableCacheConfig.custom(
        customSizeBytes: customSizeBytes,
        customPolicy: customPolicy,
        appType: appType,
        enableEncryption: enableEncryption,
        encryptionKey: encryptionKey,
        enableBackgroundCleanup: enableBackgroundCleanup,
        memoryCacheRatio: memoryCacheRatio,
      ),
    );
  }

  /// Gets the effective cache configuration.
  /// ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•
  CacheConfig get effectiveConfig {
    if (scalableConfig != null) {
      return scalableConfig!.toCacheConfig();
    }
    return config ??
        CacheConfig(
          maxCacheSize: 50 * 1024 * 1024, // 50MB default
          defaultPolicy: CachePolicy(maxAge: Duration(hours: 6)),
        );
  }

  /// Initializes the cache manager.
  /// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä
  Future<void> _initialize() async {
    _hiveDataSource = HiveDataSource();
    await _hiveDataSource.init();
    _repository = HiveCacheRepository(_hiveDataSource);
    _getCacheUseCase = GetCacheUseCase(_repository);
    _putCacheUseCase = PutCacheUseCase(_repository);
    _clearCacheUseCase = ClearCacheUseCase(_repository);

    // Create Dio with cache interceptor
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Dio ‡∏û‡∏£‡πâ‡∏≠‡∏° interceptor ‡πÅ‡∏Ñ‡∏ä
    final dio = Dio();
    dio.interceptors.add(
      DioCacheInterceptor(
        _getCacheUseCase,
        _putCacheUseCase,
        defaultPolicy: effectiveConfig.defaultPolicy,
      ),
    );
    _dioDataSource = DioDataSource(dio);
  }

  /// Retrieves JSON data from cache or API.
  ///
  /// If the data is found in cache and not expired, returns cached data.
  /// Otherwise, fetches from the API, caches it, and returns the result.
  ///
  /// Example:
  /// ```dart
  /// final posts = await cacheManager.getJson(
  ///   'https://jsonplaceholder.typicode.com/posts',
  ///   policy: CachePolicy.inHours(1),
  /// );
  /// ```
  Future<dynamic> getJson(String url, {CachePolicy? policy}) async {
    final key = 'json_$url';
    final cached = await _getCacheUseCase(key);
    if (cached != null && !cached.isExpired) {
      return _decryptIfNeeded(cached.value, policy);
    }
    final data = await _dioDataSource.getJson(url);
    final entry = CacheEntry(
      key: key,
      value: _encryptIfNeeded(data, policy),
      createdAt: DateTime.now(),
      expiresAt: policy?.expiresAt ?? effectiveConfig.defaultPolicy.expiresAt,
      isEncrypted: policy?.encryptionKey != null,
    );
    await _putCacheUseCase(entry);
    return data;
  }

  /// Retrieves bytes from cache or API.
  ///
  /// If the data is found in cache and not expired, returns cached data.
  /// Otherwise, fetches from the API, caches it, and returns the result.
  ///
  /// Useful for caching images, files, or other binary content.
  ///
  /// Example:
  /// ```dart
  /// final imageBytes = await cacheManager.getBytes(
  ///   'https://example.com/image.jpg',
  ///   policy: CachePolicy.inDays(1),
  /// );
  /// ```
  Future<List<int>> getBytes(String url, {CachePolicy? policy}) async {
    final key = 'bytes_$url';
    final cached = await _getCacheUseCase(key);
    if (cached != null && !cached.isExpired) {
      return _decryptIfNeeded(cached.value, policy);
    }
    final data = await _dioDataSource.getBytes(url);
    final entry = CacheEntry(
      key: key,
      value: _encryptIfNeeded(data, policy),
      createdAt: DateTime.now(),
      expiresAt: policy?.expiresAt ?? effectiveConfig.defaultPolicy.expiresAt,
      isEncrypted: policy?.encryptionKey != null,
    );
    await _putCacheUseCase(entry);
    return data;
  }

  /// Stores data in cache with flexible expiration options.
  ///
  /// This is the main method for storing data in the cache with full customization
  /// of expiration time and encryption settings.
  ///
  /// Parameters:
  /// - [key]: Unique identifier for the cached data
  /// - [value]: The data to cache (can be any type)
  /// - [policy]: Complete cache policy with expiration and encryption
  /// - [maxAge]: Duration until expiration (alternative to policy)
  /// - [expiresAt]: Specific expiration time (alternative to policy)
  /// - [encryptionKey]: Optional encryption key for secure storage
  ///
  /// Example:
  /// ```dart
  /// // Basic storage with duration
  /// await cacheManager.put(
  ///   key: 'user_session',
  ///   value: sessionData,
  ///   maxAge: Duration(hours: 2),
  /// );
  ///
  /// // Storage with specific expiration time
  /// await cacheManager.put(
  ///   key: 'daily_report',
  ///   value: reportData,
  ///   expiresAt: DateTime(2024, 12, 31, 23, 59, 59),
  /// );
  ///
  /// // Encrypted storage
  /// await cacheManager.put(
  ///   key: 'sensitive_data',
  ///   value: userData,
  ///   maxAge: Duration(minutes: 30),
  ///   encryptionKey: 'my-secret-key',
  /// );
  /// ```
  Future<void> put({
    required String key,
    required dynamic value,
    CachePolicy? policy,
    Duration? maxAge,
    DateTime? expiresAt,
    String? encryptionKey,
  }) async {
    // Create effective cache policy
    CachePolicy? effectivePolicy = policy;

    if (effectivePolicy == null &&
        (maxAge != null || expiresAt != null || encryptionKey != null)) {
      if (expiresAt != null) {
        effectivePolicy = CachePolicy.expiresAt(
          expirationTime: expiresAt,
          encryptionKey: encryptionKey,
        );
      } else if (maxAge != null) {
        effectivePolicy = CachePolicy.duration(
          duration: maxAge,
          encryptionKey: encryptionKey,
        );
      } else if (encryptionKey != null) {
        effectivePolicy = CachePolicy(
          maxAge: effectiveConfig.defaultPolicy.maxAge,
          encryptionKey: encryptionKey,
        );
      }
    }

    final entry = CacheEntry(
      key: key,
      value: _encryptIfNeeded(value, effectivePolicy),
      createdAt: DateTime.now(),
      expiresAt: effectivePolicy?.getExpirationTime() ??
          effectiveConfig.defaultPolicy.getExpirationTime(),
      isEncrypted: effectivePolicy?.encryptionKey != null,
    );
    await _putCacheUseCase(entry);
  }

  /// Stores data in cache with duration from now.
  /// ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  Future<void> putWithDuration({
    required String key,
    required dynamic value,
    required Duration duration,
    String? encryptionKey,
  }) async {
    await put(
      key: key,
      value: value,
      policy: CachePolicy.duration(
        duration: duration,
        encryptionKey: encryptionKey,
      ),
    );
  }

  /// Stores data in cache with specific expiration time.
  /// ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  Future<void> putWithExpirationTime({
    required String key,
    required dynamic value,
    required DateTime expirationTime,
    String? encryptionKey,
  }) async {
    await put(
      key: key,
      value: value,
      policy: CachePolicy.expiresAt(
        expirationTime: expirationTime,
        encryptionKey: encryptionKey,
      ),
    );
  }

  /// Stores data in cache that expires in X minutes.
  /// ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô X ‡∏ô‡∏≤‡∏ó‡∏µ
  Future<void> putForMinutes({
    required String key,
    required dynamic value,
    required int minutes,
    String? encryptionKey,
  }) async {
    await put(
      key: key,
      value: value,
      policy: CachePolicy.inMinutes(minutes, encryptionKey: encryptionKey),
    );
  }

  /// Stores data in cache that expires in X hours.
  ///
  /// A convenience method for storing data with hour-based expiration.
  ///
  /// Parameters:
  /// - [key]: Unique identifier for the cached data
  /// - [value]: The data to cache
  /// - [hours]: Number of hours until expiration
  /// - [encryptionKey]: Optional encryption key for secure storage
  ///
  /// Example:
  /// ```dart
  /// // Store user session for 2 hours
  /// await cacheManager.putForHours(
  ///   key: 'user_session_${userId}',
  ///   value: sessionData,
  ///   hours: 2,
  /// );
  ///
  /// // Store encrypted data for 6 hours
  /// await cacheManager.putForHours(
  ///   key: 'secure_token',
  ///   value: tokenData,
  ///   hours: 6,
  ///   encryptionKey: 'token-encryption-key',
  /// );
  /// ```
  Future<void> putForHours({
    required String key,
    required dynamic value,
    required int hours,
    String? encryptionKey,
  }) async {
    await put(
      key: key,
      value: value,
      policy: CachePolicy.inHours(hours, encryptionKey: encryptionKey),
    );
  }

  /// Stores data in cache that expires in X days.
  /// ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô X ‡∏ß‡∏±‡∏ô
  Future<void> putForDays({
    required String key,
    required dynamic value,
    required int days,
    String? encryptionKey,
  }) async {
    await put(
      key: key,
      value: value,
      policy: CachePolicy.inDays(days, encryptionKey: encryptionKey),
    );
  }

  /// Stores data in cache that expires at end of day.
  /// ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏ß‡∏±‡∏ô
  Future<void> putUntilEndOfDay({
    required String key,
    required dynamic value,
    String? encryptionKey,
  }) async {
    await put(
      key: key,
      value: value,
      policy: CachePolicy.endOfDay(encryptionKey: encryptionKey),
    );
  }

  /// Stores data in cache that expires at end of week.
  /// ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏õ‡∏î‡∏≤‡∏´‡πå
  Future<void> putUntilEndOfWeek({
    required String key,
    required dynamic value,
    String? encryptionKey,
  }) async {
    await put(
      key: key,
      value: value,
      policy: CachePolicy.endOfWeek(encryptionKey: encryptionKey),
    );
  }

  /// Stores data in cache that expires at end of month.
  /// ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  Future<void> putUntilEndOfMonth({
    required String key,
    required dynamic value,
    String? encryptionKey,
  }) async {
    await put(
      key: key,
      value: value,
      policy: CachePolicy.endOfMonth(encryptionKey: encryptionKey),
    );
  }

  /// Stores data in cache that never expires (practically).
  /// ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß)
  Future<void> putPermanent({
    required String key,
    required dynamic value,
    String? encryptionKey,
  }) async {
    await put(
      key: key,
      value: value,
      policy: CachePolicy.never(encryptionKey: encryptionKey),
    );
  }

  /// Retrieves data from cache by key.
  ///
  /// Returns the cached data if it exists and hasn't expired, otherwise returns null.
  ///
  /// Type parameter [T] can be used to specify the expected return type.
  ///
  /// Parameters:
  /// - [key]: The key of the cached data to retrieve
  ///
  /// Returns the cached value of type [T] or null if not found or expired.
  ///
  /// Example:
  /// ```dart
  /// // Get data with automatic type inference
  /// final userData = await cacheManager.get('user_profile');
  ///
  /// // Get data with explicit type
  /// final userProfile = await cacheManager.get<Map<String, dynamic>>('user_profile');
  ///
  /// // Check if data exists before using
  /// final cachedPosts = await cacheManager.get('recent_posts');
  /// if (cachedPosts != null) {
  ///   // Use cached data
  ///   displayPosts(cachedPosts);
  /// } else {
  ///   // Fetch fresh data
  ///   final freshPosts = await api.getPosts();
  ///   await cacheManager.putForHours(key: 'recent_posts', value: freshPosts, hours: 1);
  /// }
  /// ```
  Future<T?> get<T>(String key) async {
    final cached = await _getCacheUseCase(key);
    if (cached != null && !cached.isExpired) {
      return cached.value;
    }
    return null;
  }

  /// Gets cache entry info including expiration details.
  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  Future<CacheEntryInfo?> getEntryInfo(String key) async {
    final cached = await _getCacheUseCase(key);
    if (cached == null) return null;

    return CacheEntryInfo(
      key: cached.key,
      hasValue: true,
      isExpired: cached.isExpired,
      createdAt: cached.createdAt,
      expiresAt: cached.expiresAt,
      isEncrypted: cached.isEncrypted,
      remainingTime: cached.expiresAt?.difference(DateTime.now()),
    );
  }

  /// Gets data from cache even if expired (for debugging/recovery).
  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ debug/‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô)
  Future<dynamic> getExpired(String key) async {
    final cached = await _getCacheUseCase(key);
    return cached?.value;
  }

  /// Checks if a key exists in cache and is not expired.
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ key ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  Future<bool> exists(String key) async {
    final cached = await _getCacheUseCase(key);
    return cached != null && !cached.isExpired;
  }

  /// Checks if a key exists in cache (regardless of expiration).
  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ key ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏Ñ‡∏ä (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)
  Future<bool> existsAny(String key) async {
    final cached = await _getCacheUseCase(key);
    return cached != null;
  }

  /// Gets remaining time until expiration for a cache key.
  /// ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key ‡∏Ç‡∏≠‡∏á‡πÅ‡∏Ñ‡∏ä
  Future<Duration?> getRemainingTime(String key) async {
    final cached = await _getCacheUseCase(key);
    if (cached?.expiresAt == null) return null;

    final remaining = cached!.expiresAt!.difference(DateTime.now());
    return remaining.isNegative ? Duration.zero : remaining;
  }

  /// Extends the expiration time of a cache entry.
  /// ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡∏ä
  Future<bool> extendExpiration({
    required String key,
    Duration? additionalTime,
    DateTime? newExpirationTime,
  }) async {
    final cached = await _getCacheUseCase(key);
    if (cached == null) return false;

    DateTime? newExpiry;
    if (newExpirationTime != null) {
      newExpiry = newExpirationTime;
    } else if (additionalTime != null) {
      newExpiry = (cached.expiresAt ?? DateTime.now()).add(additionalTime);
    } else {
      return false;
    }

    final updatedEntry = CacheEntry(
      key: cached.key,
      value: cached.value,
      createdAt: cached.createdAt,
      expiresAt: newExpiry,
      isEncrypted: cached.isEncrypted,
    );

    await _putCacheUseCase(updatedEntry);
    return true;
  }

  /// Clears all cache.
  /// ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<void> clear() async {
    await _clearCacheUseCase();
  }

  /// Encrypts data if encryption key is provided.
  /// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  dynamic _encryptIfNeeded(dynamic data, CachePolicy? policy) {
    if (policy?.encryptionKey != null) {
      final jsonString = data is String ? data : data.toString();
      return utils.EncryptionUtils.encryptData(
        jsonString,
        policy!.encryptionKey!,
      );
    }
    return data;
  }

  /// Decrypts data if it was encrypted.
  /// ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
  dynamic _decryptIfNeeded(dynamic data, CachePolicy? policy) {
    if (policy?.encryptionKey != null && data is String) {
      return utils.EncryptionUtils.decryptData(data, policy!.encryptionKey!);
    }
    return data;
  }
}
